(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{358:function(v,_,i){"use strict";i.r(_);var t=i(42),e=Object(t.a)({},(function(){var v=this,_=v.$createElement,i=v._self._c||_;return i("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[i("h1",{attrs:{id:"走进jetpack框架组件库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#走进jetpack框架组件库"}},[v._v("#")]),v._v(" 走进Jetpack框架组件库")]),v._v(" "),i("p",[v._v("参考：\nhttps://www.jianshu.com/p/5ffb9993e4e5")]),v._v(" "),i("p",[v._v("https://juejin.cn/post/6874886821235392519")]),v._v(" "),i("p",[v._v("https://github.com/mrme2014/hi_jetpack")]),v._v(" "),i("p",[v._v("https://doc.devio.org/as/book/docs/Part2/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%BC%80%E5%8F%91%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/1.thread_introduction.html")]),v._v(" "),i("p",[v._v("https://github.com/rivenlee0/CGhelper")]),v._v(" "),i("h2",{attrs:{id:"什么是jetpack"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#什么是jetpack"}},[v._v("#")]),v._v(" 什么是Jetpack")]),v._v(" "),i("p",[v._v("自从Google在2018年推出Jetpack之后，它就成为了"),i("strong",[v._v("Android未来发展的指向标")]),v._v("。Google也希望通过Jetpack统一开发者的开发规范，同事它也是众多优秀Android组件的集合。Jetpack是Google为解决Android开发碎片化，打造成熟健康生态圈提出的战略规划，是Google对Android未来提出的发展方向。")]),v._v(" "),i("blockquote",[i("p",[v._v("注意：Jetpack是众多组件库的统称，AndroidX是这些组件的统一包名。")])]),v._v(" "),i("p",[v._v("发展到今天，各个大厂以及GitHub都已经在拥抱并适配Jetpack，甚至Jetpack已经成为了Android开发工程师面试必问的一项技术，可以称它为Android开发必学的技能。")]),v._v(" "),i("p",[v._v("详细可以参考：https://developer.android.google.cn/jetpack")]),v._v(" "),i("h2",{attrs:{id:"jetpack的优势"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#jetpack的优势"}},[v._v("#")]),v._v(" Jetpack的优势")]),v._v(" "),i("ul",[i("li",[v._v("Jetpack拥有基于生命周期感知的能力，可以减少NPE崩溃、内存泄露。为我们开发出健壮且流畅的程序提供强力保障；")]),v._v(" "),i("li",[v._v("Jetpack可以消除大量重复样板式代码，可以加速Android的开发进程。这些组件可搭配工作，也可单独使用，同时配合Kotlin语言特性能够显著提高工作效率。")]),v._v(" "),i("li",[v._v("统一开发模式，抛弃传统的MVC、MVP。")])]),v._v(" "),i("h2",{attrs:{id:"jetpack组件库介绍"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#jetpack组件库介绍"}},[v._v("#")]),v._v(" Jetpack组件库介绍")]),v._v(" "),i("p",[i("img",{attrs:{src:"https://gitee.com/jarrysong/img/raw/master/img/5196125-0e0834ffa48d871b.webp",alt:"img"}})]),v._v(" "),i("p",[v._v("从上图中可以看到Jetpack一共有四部分组成，然而UI、Behavior、Foundation这三部分大多是对已有内容的收集整理，这四部分中最为"),i("strong",[v._v("核心的就是本专栏着重讲解的Architecture架构部分。")])]),v._v(" "),i("p",[v._v("Architecture架构部分主要包含以上8个重要成员，本着面向实际开发的需要，所以专栏多以"),i("strong",[v._v("高频用法 + 实现原理 + 面试考点 + 进阶实战")]),v._v("多个维度授课。让同学们充分掌握Jetpack的核心组件。")]),v._v(" "),i("p",[v._v("下面先对专栏的课时安排以及Ketpack核心组件进行初步的介绍让同学们对Jetpack组件库有个初步的印象，详细的我们会在每一节中再展开讨论。")]),v._v(" "),i("p",[i("img",{attrs:{src:"https://gitee.com/jarrysong/img/raw/master/img/image-20201126210406985.png",alt:"image-20201126210406985"}})]),v._v(" "),i("p",[i("strong",[v._v("1.Lifecycler:具备宿主生命周期感知能力的组件")])]),v._v(" "),i("ul",[i("li",[i("p",[v._v("特性：它持有组件(如Activity或Fragment)生命周期状态的信息，并且允许其他对象观察此状态。")])]),v._v(" "),i("li",[i("p",[v._v("本篇主要讲解：")]),v._v(" "),i("ul",[i("li",[v._v("什么是Lifecycle；")]),v._v(" "),i("li",[v._v("如何使用Lifecycle观察宿主状态；")]),v._v(" "),i("li",[v._v("Fragment是如何实现Lifecycle的；")]),v._v(" "),i("li",[v._v("Activity是如何实现Lifecycle的；")]),v._v(" "),i("li",[v._v("Lifecycle是如何分发宿主状态的等内容。")])])])]),v._v(" "),i("p",[i("strong",[v._v("2.LiveData：新一代具备生命周期感知能力的数据订阅、分发组件")])]),v._v(" "),i("ul",[i("li",[v._v("特性：支持共享资源、支持黏性事件的分发、不再需要手动处理生命周期、确保界面符合数据状态。")]),v._v(" "),i("li",[v._v("不足：黏性事件不支持取消。")]),v._v(" "),i("li",[v._v("本篇主要介绍：\n"),i("ul",[i("li",[v._v("什么是LiveData；")]),v._v(" "),i("li",[v._v("LiveData核心方法，")]),v._v(" "),i("li",[v._v("LiveData事件分发实现原理等内容。")])])])]),v._v(" "),i("p",[i("strong",[v._v("3.LiveData进阶实现")])]),v._v(" "),i("ul",[i("li",[v._v("本篇将着重讲解如何基于LiveData实现消息总线，并实现黏性事件可控，从而抛弃EventBus。")])]),v._v(" "),i("p",[i("strong",[v._v("4.ViewModel：具备生命周期感知能力的数据存储组件")])]),v._v(" "),i("ul",[i("li",[v._v("特性:\n"),i("ul",[i("li",[v._v("1.页面因配置变更导致的重启，此时数据不丢失。")]),v._v(" "),i("li",[v._v("2.可以实现跨页面（跨Activity）的数据共享。")])])]),v._v(" "),i("li",[v._v("本篇主要讲解:\n"),i("ul",[i("li",[v._v("什么是ViewModel；")]),v._v(" "),i("li",[v._v("ViewModel的用法；")]),v._v(" "),i("li",[v._v("ViewModel复用实现原理等内容。")])])])]),v._v(" "),i("p",[i("strong",[v._v("5.SavedState架构组件原理解析")])]),v._v(" "),i("ul",[i("li",[v._v("特性：因内存不足，电量不足导致页面被回收时可以搭配ViewModel实现数据存储于恢复。")]),v._v(" "),i("li",[v._v("本篇主要讲解：\n"),i("ul",[i("li",[v._v("什么是SavedState；")]),v._v(" "),i("li",[v._v("SaveState的用法；")]),v._v(" "),i("li",[v._v("SavedState数据存储与恢复实现原理等内容。")])])])]),v._v(" "),i("p",[i("strong",[v._v("6.Room：轻量级orm数据库，本质上是一个SQLite抽象层")])]),v._v(" "),i("ul",[i("li",[v._v("特性：使用简单（类似于Retrofit库），通过注解的方式实现相关功能。编译时自动生成相关实现类")]),v._v(" "),i("li",[v._v("本篇主要讲解主要介绍:\n"),i("ul",[i("li",[v._v("什么是Room；")]),v._v(" "),i("li",[v._v("Room高频用法；")]),v._v(" "),i("li",[v._v("Room数据库创建实现原理；")]),v._v(" "),i("li",[v._v("Room与LiveData的巧妙结合，数据变更监听等内容。")])])])]),v._v(" "),i("p",[i("strong",[v._v("7.基于Room封装APP离线缓存框架")])]),v._v(" "),i("ul",[i("li",[v._v("本篇主要讲解如何预计Room数据库实现离线缓存框架HiStorage，可以用于缓存任意数据结构的数据。")])]),v._v(" "),i("p",[i("strong",[v._v("8.DataBinding：只是一种工具，它解决的是View和数据之间的双向绑定。")])]),v._v(" "),i("ul",[i("li",[v._v("特性：支持数据与视图双向绑定、数据绑定空安全、减少模板代码、释放Activity/Fragment压力")]),v._v(" "),i("li",[v._v("本篇主要讲解:\n"),i("ul",[i("li",[v._v("什么是DataBinding；")]),v._v(" "),i("li",[v._v("DataBinding的优势；")]),v._v(" "),i("li",[v._v("DataBinding如何使用；")]),v._v(" "),i("li",[v._v("与ViewBinding的区别等内容。")])])])]),v._v(" "),i("p",[i("strong",[v._v("9.Paging：列表分页组件，可以轻松完成分页预加载以达到无限滑动的效果")])]),v._v(" "),i("ul",[i("li",[v._v("巧妙融合LiveData、提供多种数据源加载方式")]),v._v(" "),i("li",[v._v("不足之处：不支持列表数据增删改。列表添加HeaderView，FooterView定位不准确。这点我们会这招讲解如何解决这些问题")]),v._v(" "),i("li",[v._v("本篇主要讲解:\n"),i("ul",[i("li",[v._v("什么是Paging；")]),v._v(" "),i("li",[v._v("如何使用Paging；")]),v._v(" "),i("li",[v._v("Paging工作原理；")]),v._v(" "),i("li",[v._v("Paging现存问题以及如何去解决等内容。")])])])]),v._v(" "),i("p",[i("strong",[v._v("10.Navigation组件原理分析：端内统一路由组件")])]),v._v(" "),i("ul",[i("li",[v._v("不足：十分依赖xml配置文件不利于组件化，模块化，千人千面场景开发")]),v._v(" "),i("li",[v._v("本篇主要讲解:\n"),i("ul",[i("li",[v._v("什么是Navigation；")]),v._v(" "),i("li",[v._v("Navigation如何使用；")]),v._v(" "),i("li",[v._v("Navigation工作原理；")]),v._v(" "),i("li",[v._v("Navigation现存问题。")])])])]),v._v(" "),i("p",[i("strong",[v._v("11.组件进阶改造")])]),v._v(" "),i("ul",[i("li",[v._v("本篇主要讲解基于Navigation手把手实现APP配置架构搭建")])]),v._v(" "),i("p",[i("strong",[v._v("12.WorkManager：新一代后台任务管理组件，功能十分强悍。Service能做的事情它都能做")])]),v._v(" "),i("ul",[i("li",[v._v("支持周期性任务调度、链式任务调度、丰富的任务约束条件、程序即便退出，依旧能保证任务的执行")]),v._v(" "),i("li",[v._v("本篇主要讲解:\n"),i("ul",[i("li",[v._v("什么是WorkManager；")]),v._v(" "),i("li",[v._v("WorkManager的优势；")]),v._v(" "),i("li",[v._v("WorkManager如何使用；")]),v._v(" "),i("li",[v._v("WorkManager架构工作原理等内容")])])])]),v._v(" "),i("p",[i("strong",[v._v("13.老项目适配AndroidX")])]),v._v(" "),i("ul",[i("li",[v._v("本篇主要讲解老旧项目如何使用Jetpack的能力，如何迁移，以及迁移过程存在的主要问题")])]),v._v(" "),i("p",[i("strong",[v._v("14.Jetpack专栏总结：回顾全文。对本专栏做一个全面的总结与展望。")])])])}),[],!1,null,null,null);_.default=e.exports}}]);