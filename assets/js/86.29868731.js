(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{430:function(t,a,r){"use strict";r.r(a);var v=r(42),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"哈夫曼树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#哈夫曼树"}},[t._v("#")]),t._v(" 哈夫曼树")]),t._v(" "),r("h2",{attrs:{id:"哈夫曼编码-huffman-coding"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#哈夫曼编码-huffman-coding"}},[t._v("#")]),t._v(" 哈夫曼编码（Huffman Coding）")]),t._v(" "),r("p",[t._v("1.哈夫曼编码，又称为霍夫曼编码，它是现代压缩算法的基础")]),t._v(" "),r("p",[t._v("2.假设要把字符串【ABBBCCCCCCCCDDDDDDEE】转成二进制编码进行传输")]),t._v(" "),r("ul",[r("li",[t._v("可以转成ASCII编码（65 ~ 69，1000001 ~ 1000101），但是有点冗长，如果希望编码更短呢？")]),t._v(" "),r("li",[t._v("可以先约定5个字母对应的二进制\nA B C D E 000 001 010 011 100")]),t._v(" "),r("li",[t._v("✓对应的二进制编码：000001001001010010010010010010010010011011011011011011100100")]),t._v(" "),r("li",[t._v("✓一共20个字母，转成了60个二进制位")]),t._v(" "),r("li",[t._v("如果使用哈夫曼编码，可以压缩至41个二进制位，约为原来长度的68.3%")])]),t._v(" "),r("h2",{attrs:{id:"哈夫曼树-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#哈夫曼树-2"}},[t._v("#")]),t._v(" 哈夫曼树")]),t._v(" "),r("p",[t._v("1.先计算出每个字母的出现频率（权值，这里直接用出现次数），【ABBBCCCCCCCCDDDDDDEE】")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://gitee.com/jarrysong/img/raw/master/img/20200916080342.png",alt:"image"}}),t._v("\n2.利用这些权值，构建一棵哈夫曼树（又称为霍夫曼树、最优二叉树）")]),t._v(" "),r("p",[t._v("3.如何构建一棵哈夫曼树？（假设有 n 个权值）")]),t._v(" "),r("ul",[r("li",[t._v("1.以权值作为根节点构建 n 棵二叉树，组成森林")]),t._v(" "),r("li",[t._v("2.在森林中选出 2个根节点最小的树合并，作为一棵新树的左右子树，且新树的根节点为其左右子树根节点之和")]),t._v(" "),r("li",[t._v("3.从森林中删除刚才选取的 2 棵树，并将新树加入森林")]),t._v(" "),r("li",[t._v("4.重复 2、3 步骤，直到森林只剩一棵树为止，该树即为哈夫曼树")])]),t._v(" "),r("h2",{attrs:{id:"构建哈夫曼树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构建哈夫曼树"}},[t._v("#")]),t._v(" 构建哈夫曼树")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://gitee.com/jarrysong/img/raw/master/img/20200916080430.png",alt:"image.png"}})]),t._v(" "),r("h2",{attrs:{id:"构建哈夫曼编码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构建哈夫曼编码"}},[t._v("#")]),t._v(" 构建哈夫曼编码")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://gitee.com/jarrysong/img/raw/master/img/20200916080518.png",alt:"image.png"}}),t._v("\n1.left为0，right为1，可以得出5个字母对应的哈夫曼编码")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://gitee.com/jarrysong/img/raw/master/img/20200916080556.png",alt:"image.png"}})]),t._v(" "),r("p",[t._v("2.【ABBBCCCCCCCCDDDDDDEE】的哈夫曼编码是")]),t._v(" "),r("ul",[r("li",[t._v("1110110110110000000001010101010101111")])]),t._v(" "),r("p",[t._v("3.总结")]),t._v(" "),r("ul",[r("li",[t._v("n 个权值构建出来的哈夫曼树拥有 n 个叶子节点")]),t._v(" "),r("li",[t._v("每个哈夫曼编码都不是另一个哈夫曼编码的前缀")]),t._v(" "),r("li",[t._v("哈夫曼树是带权路径长度最短的树，权值较大的节点离根节点较近")]),t._v(" "),r("li",[t._v("带权路径长度：树中所有的叶子节点的权值乘上其到根节点的路径 长度。与最终的哈夫曼编码总长度成正比关系。")])])])}),[],!1,null,null,null);a.default=_.exports}}]);