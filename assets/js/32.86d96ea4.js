(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{377:function(t,a,s){"use strict";s.r(a);var n=s(42),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"深入理解kotlin注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深入理解kotlin注解"}},[t._v("#")]),t._v(" 深入理解Kotlin注解")]),t._v(" "),s("p",[t._v("在这一节为大家继续带来Kotlin中的一些高级的内容：Kotlin中的注解。")]),t._v(" "),s("h2",{attrs:{id:"学习目标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#学习目标"}},[t._v("#")]),t._v(" 学习目标")]),t._v(" "),s("ul",[s("li",[t._v("架构开发的一把利器；")]),t._v(" "),s("li",[t._v("使逻辑实现更加简洁，让代码更加清晰易懂；")]),t._v(" "),s("li",[t._v("能够帮助你研究和理解别的框架；")]),t._v(" "),s("li",[t._v("自己造轮子需要，能用注解解决问题；")])]),t._v(" "),s("p",[t._v("比如：有了注解我们可以很好地实现调用前权限检测，登录拦截，AOP等功能")]),t._v(" "),s("p",[t._v("提到注解大家可能都不陌生，那Kotlin的注解是怎样子的，它又和我们所熟悉的Java注解又有何异同呢？")]),t._v(" "),s("h2",{attrs:{id:"目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),s("ul",[s("li",[t._v("Kotlin的注解是怎样子的？")]),t._v(" "),s("li",[t._v("如何声明Kotlin注解？")]),t._v(" "),s("li",[t._v("如何使用Kotlin注解？")]),t._v(" "),s("li",[t._v("Kotlin中的元注解")]),t._v(" "),s("li",[t._v("注解的使用场景")]),t._v(" "),s("li",[t._v("案例：自定义注解实现API调用时的请求方法检查")])]),t._v(" "),s("h2",{attrs:{id:"kotlin的注解是怎样子的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kotlin的注解是怎样子的"}},[t._v("#")]),t._v(" Kotlin的注解是怎样子的？")]),t._v(" "),s("p",[t._v("注解就是为了给代码提供元数据，并且注解是不直接影响代码的执行，"),s("strong",[t._v("在Kotlin中注解核心概念和Java一样，并且100%与Java注解兼容。")]),t._v(" 一个注解允许你把额外的元数据关联到一个声明上，然后元数据就可以被某种方式(比如运行时反射方式以及一些源代码工具)访问。")]),t._v(" "),s("blockquote",[s("p",[t._v("注解实际上就是一种代码标签，它作用的对象是代码。它可以给特定的注解代码标注一些额外的信息。然而这些信息可以选择不同保留时期，比如源码期、编译期、运行期。然后在不同时期，可以通过某种方式获取标签的信息来处理实际的代码逻辑，这种方式常常就是我们所说的反射。")])]),t._v(" "),s("h2",{attrs:{id:"如何声明kotlin注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何声明kotlin注解"}},[t._v("#")]),t._v(" 如何声明Kotlin注解？")]),t._v(" "),s("p",[t._v("在Kotlin中的声明注解的方式和Java稍微不一样，在Java中主要是通过 @interface关键字来声明，而在Kotlin中只需要通过 annotation class 来声明。")]),t._v(" "),s("blockquote",[s("p",[t._v("Java注解的声明")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Java中的注解通过@interface关键字进行定义，它和接口声明类似，只不过在前面多加@ ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApiDoc")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("Kotlin注解的声明")])]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//和一般的声明很类似，只是在class前面加上了annotation修饰符")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("annotation")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ApiDoc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"如何使用kotlin注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何使用kotlin注解"}},[t._v("#")]),t._v(" 如何使用Kotlin注解？")]),t._v(" "),s("p",[t._v("在Kotlin中使用注解和Java一样：")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation builtin"}},[t._v("@ApiDoc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"修饰类"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" Box "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation builtin"}},[t._v("@ApiDoc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"修饰字段"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation builtin"}},[t._v("@ApiDoc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"修饰方法"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"kotlin中的元注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kotlin中的元注解"}},[t._v("#")]),t._v(" Kotlin中的元注解")]),t._v(" "),s("p",[t._v("和Java一样在Kotlin中一个Kotlin注解类自己本身也可以被注解，可以给注解类加注解，我们把这种注解称为元注解。")]),t._v(" "),s("p",[t._v("Kotlin中的元注解类定义于kotlin.annotation包中，主要有：")]),t._v(" "),s("ul",[s("li",[t._v("@Target：定义注解能够应用于那些目标对象")]),t._v(" "),s("li",[t._v("@Retention：注解的保留期")]),t._v(" "),s("li",[t._v("@Repeatable：标记的注解可以多次应用于相同的声明或类型")]),t._v(" "),s("li",[t._v("@MustBeDocumented：修饰的注解将被文档工具提取到API文档中")])]),t._v(" "),s("p",[t._v("4种元注解，相比Java中5种元注解少了@Inherited，在这里四种元注解中最常用的是前两种，接下来我们就来重点分析下前两种元注解：")]),t._v(" "),s("h3",{attrs:{id:"target"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#target"}},[t._v("#")]),t._v(" @Target")]),t._v(" "),s("p",[t._v("@Target顾名思义就是目标对象，也就是我们定义的注解能够应用于那些目标对象，可以同时指定多个作用的目标对象。")]),t._v(" "),s("h4",{attrs:{id:"target的原型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#target的原型"}},[t._v("#")]),t._v(" @Target的原型")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation builtin"}},[t._v("@Target")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AnnotationTarget"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ANNOTATION_CLASS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//可以给标签自己贴标签")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation builtin"}},[t._v("@MustBeDocumented")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("annotation")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Target")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("vararg")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" allowedTargets"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" AnnotationTarget"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("从@Target的原型中我们可以看出，它接受一个vararg可变数量的参数，所以可以同时指定多个作用的目标对象，并且参数类型限定为AnnotationTarget。")]),t._v(" "),s("p",[t._v("在@Target注解中可以同时指定一个或多个目标对象，那么到底有哪些目标对象呢？接下来让我们一起走进AnnotationTarget枚举类的源码：")]),t._v(" "),s("p",[s("strong",[t._v("AnnotationTarget")])]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" AnnotationTarget "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    CLASS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示作用对象有类、接口、object对象表达式、注解类")]),t._v("\n    ANNOTATION_CLASS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示作用对象只有注解类")]),t._v("\n    TYPE_PARAMETER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示作用对象是泛型类型参数(暂时还不支持)")]),t._v("\n    PROPERTY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示作用对象是属性")]),t._v("\n    FIELD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示作用对象是字段，包括属性的幕后字段")]),t._v("\n    LOCAL_VARIABLE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示作用对象是局部变量")]),t._v("\n    VALUE_PARAMETER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示作用对象是函数或构造函数的参数")]),t._v("\n    CONSTRUCTOR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示作用对象是构造函数，主构造函数或次构造函数")]),t._v("\n    FUNCTION"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示作用对象是函数，不包括构造函数")]),t._v("\n    PROPERTY_GETTER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示作用对象是属性的getter函数")]),t._v("\n    PROPERTY_SETTER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示作用对象是属性的setter函数")]),t._v("\n    TYPE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示作用对象是一个类型，比如类、接口、枚举")]),t._v("\n    EXPRESSION"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示作用对象是一个表达式")]),t._v("\n    FILE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示作用对象是一个File")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation builtin"}},[t._v("@SinceKotlin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    TYPEALIAS"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示作用对象是一个类型别名")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("一旦注解被限定了@Target那么它只能被应用于限定的目标对象上，为了验证这一说法，我们为ApiDoc限定下目标对象：")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation builtin"}},[t._v("@Target")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AnnotationTarget"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CLASS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("annotation")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ApiDoc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token annotation builtin"}},[t._v("@ApiDoc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"修饰类"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" Box "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation builtin"}},[t._v("@ApiDoc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"修饰字段"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation builtin"}},[t._v("@ApiDoc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"修饰方法"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这样一来ApiDoc注解只能被应用于类上，如果将它应用在方法或字段上则会抛出异常：")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("This "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("annotation")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" not applicable "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" target "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'member property with backing field'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation builtin"}},[t._v("@Retention")]),t._v("\n")])])]),s("h3",{attrs:{id:"retention"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#retention"}},[t._v("#")]),t._v(" @Retention")]),t._v(" "),s("p",[t._v("我们可以理解为保留期，和Java一样Kotlin有三种时期:")]),t._v(" "),s("ul",[s("li",[t._v("源代码时期(SOURCE)")]),t._v(" "),s("li",[t._v("编译时期(BINARY)")]),t._v(" "),s("li",[t._v("运行时期(RUNTIME)。")])]),t._v(" "),s("h4",{attrs:{id:"retention原型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#retention原型"}},[t._v("#")]),t._v(" @Retention原型")]),t._v(" "),s("div",{staticClass:"language-koltin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("@Target(AnnotationTarget.ANNOTATION_CLASS)//目标对象是注解类\npublic annotation class Retention(val value: AnnotationRetention = AnnotationRetention.RUNTIME)\n")])])]),s("p",[t._v("Retention接收一个AnnotationRetention类型的参数，该参数有个默认值，默认是保留在运行时期。")]),t._v(" "),s("h4",{attrs:{id:"annotationretention"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#annotationretention"}},[t._v("#")]),t._v(" AnnotationRetention")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation builtin"}},[t._v("@Retention")]),t._v("元注解取值主要来源于AnnotationRetention枚举类\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" AnnotationRetention "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    SOURCE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//源代码时期(SOURCE): 注解不会存储在输出class字节码中")]),t._v("\n    BINARY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//编译时期(BINARY): 注解会存储出class字节码中，但是对反射不可见")]),t._v("\n    RUNTIME"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//运行时期(RUNTIME): 注解会存储出class字节码中，也会对反射可见, 默认是RUNTIME")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"注解的使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注解的使用场景"}},[t._v("#")]),t._v(" 注解的使用场景")]),t._v(" "),s("ul",[s("li",[t._v("提供信息给编译器：编译器可以利用注解来处理一些，比如一些警告信息，错误等")]),t._v(" "),s("li",[t._v("编译阶段时处理：利用注解信息来生成一些代码，在Kotlin生成代码非常常见，一些内置的注解为了与Java API的互操作性，往往借助注解在编译阶段生成一些额外的代码")]),t._v(" "),s("li",[t._v("运行时处理：某些注解可以在程序运行时，通过反射机制获取注解信息来处理一些程序逻辑")])]),t._v(" "),s("h2",{attrs:{id:"案例-自定义注解实现api调用时的请求方法检查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#案例-自定义注解实现api调用时的请求方法检查"}},[t._v("#")]),t._v(" 案例：自定义注解实现API调用时的请求方法检查")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" Method "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    GET"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    POST\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token annotation builtin"}},[t._v("@Target")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AnnotationTarget"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CLASS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation builtin"}},[t._v("@Retention")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AnnotationRetention"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RUNTIME"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("annotation")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HttpMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" method"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Method"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" Api "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" version"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.0"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token annotation builtin"}},[t._v("@HttpMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Method"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GET"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" ApiGetArticles "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Api "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/api.articles"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fire")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("api"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Api"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" annotations "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" api"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("javaClass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("annotations\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" method "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" annotations"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" it "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" HttpMethod "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" HttpMethod\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"通过注解得知该接口需要通过：'),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v("${")]),t._v("method"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("method"),s("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v("}")])]),t._v(' 方式请求"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);